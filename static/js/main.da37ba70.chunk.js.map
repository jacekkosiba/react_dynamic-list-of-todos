{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/TodoFilter/TodoFilter.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","todos","onTodoSelect","selectedId","className","map","todo","id","completed","cn","title","onClick","type","Loader","TodoModal","selectedTodo","onModalClose","useState","todoUser","setTodoUser","useEffect","userId","href","email","name","TodoFilter","onFilterChange","onQueryChange","queryValue","onChange","event","selectedFilter","target","value","placeholder","style","pointerEvents","App","setTodos","setSelectedTodo","filterType","setFilterType","query","setQuery","loadTodos","a","allTodos","filteredTodos","filter","trim","length","toLocaleLowerCase","includes","console","error","newFilterType","input","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da37ba70.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[] | null,\n  onTodoSelect: (todo: Todo) => void,\n  selectedId?: number,\n};\n\nexport const TodoList: FC<Props> = ({ todos, onTodoSelect, selectedId }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {\n        todos?.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className=\"\"\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                onClick={() => onTodoSelect(todo)}\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n              >\n                <span className=\"icon\">\n                  {\n                    selectedId === todo.id\n                      ? <i className=\"far fa-eye-slash\" />\n                      : <i className=\"far fa-eye\" />\n                  }\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))\n      }\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo,\n  onModalClose: () => void;\n};\n\nexport const TodoModal: FC<Props> = ({ selectedTodo, onModalClose }) => {\n  const [todoUser, setTodoUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId).then(setTodoUser);\n  }, [selectedTodo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!todoUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              onClick={onModalClose}\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                selectedTodo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href={`mailto:${todoUser?.email}`}>\n                {todoUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { ChangeEvent, FC } from 'react';\nimport { FilterType } from '../../types';\n\ntype Props = {\n  onFilterChange: (filter: FilterType) => void,\n  onQueryChange: (input: string) => void,\n  queryValue: string,\n};\n\nexport const TodoFilter: FC<Props> = ({\n  onFilterChange, onQueryChange, queryValue,\n}) => {\n  const handleFilterChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedFilter = event.target.value as FilterType;\n\n    return onFilterChange(selectedFilter);\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    return onQueryChange(value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          onChange={handleInputChange}\n          value={queryValue}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {\n          queryValue && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                onClick={() => onQueryChange('')}\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n              />\n            </span>\n          )\n        }\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable max-len */\nimport { FC, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo, FilterType } from './types';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { TodoFilter } from './components/TodoFilter';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[] | null>(null);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterType, setFilterType] = useState<FilterType>('all');\n  const [query, setQuery] = useState<string>('');\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      try {\n        const allTodos = await getTodos();\n        let filteredTodos: Todo[] | null = null;\n\n        switch (filterType) {\n          case 'all':\n            filteredTodos = allTodos;\n            break;\n          case 'active':\n            filteredTodos = allTodos.filter(todo => !todo.completed);\n            break;\n          case 'completed':\n            filteredTodos = allTodos.filter(todo => todo.completed);\n            break;\n          default:\n            filteredTodos = allTodos;\n            break;\n        }\n\n        if (query.trim().length) {\n          filteredTodos = filteredTodos\n            .filter(todo => todo.title.toLocaleLowerCase()\n              .includes(query.toLocaleLowerCase()));\n        }\n\n        setTodos(filteredTodos);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to fetch todos:', error);\n      }\n    };\n\n    loadTodos();\n  }, [filterType, query]);\n\n  const handleTodoSelected = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handleModalClose = () => {\n    setSelectedTodo(null);\n  };\n\n  const handleFilterChange = (newFilterType: FilterType) => {\n    if (newFilterType === filterType) {\n      return;\n    }\n\n    setFilterType(newFilterType);\n  };\n\n  const handleQueryChange = (input: string) => {\n    setQuery(input);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter\n                onFilterChange={handleFilterChange}\n                onQueryChange={handleQueryChange}\n                queryValue={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                todos\n                  ? (\n                    <TodoList\n                      todos={todos}\n                      onTodoSelect={handleTodoSelected}\n                      selectedId={selectedTodo?.id}\n                    />\n                  )\n                  : <Loader />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        selectedTodo && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            onModalClose={handleModalClose}\n          />\n        )\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}